"""
Reporter classes are used to process the report files generated by the various
tools used by the wrapper objects. Reporters are created for each tool and are
set up to search for specific messages to report back to the user. Reporters
can also be set up to search for user defined strings.
"""
import logging
import traceback
import importlib
import inspect
import sys
import os

from chiptools.common.exceptions import FileNotFoundError


log = logging.getLogger(__name__)
reporter_temporary_module = 'chiptools_reporter_temporary_module'


def get_reporter(path):
    """Import the Python script supplied by the path and return a handle to a
    reporter function from the import. It is expected that the file to be
    imported contains a function called 'report' that accepts a path to a
    folder. If these conditions are not met this function will return None.
    """
    if path is None:
        return None
    if reporter_temporary_module in sys.modules:
        # Clear the reference to the testPackageModule module
        # TODO: Although unlikely, it is possible that we may delete an
        # existing module from the modules list, is there a more robust way of
        # achieving this functionality?
        del sys.modules[reporter_temporary_module]
    if not os.path.exists(path):
        log.error('File not found, aborting module load: ' + str(path))
        return
    try:
        # We are loading unchecked user code here, the import stage is
        # exception checked.
        importlib.machinery.SourceFileLoader(
            reporter_temporary_module,
            path,
        ).load_module()
        import chiptools_reporter_temporary_module  # type: ignore

    except Exception:
        log.error(
            'The module could not be imported due to the '
            + ' following error:'
        )
        log.error(traceback.format_exc())
        return None

    # Search the module members until a function with the name 'report' is
    # found. If no function can be found return None
    for name, obj in inspect.getmembers(chiptools_reporter_temporary_module):
        if hasattr(obj, '__name__'):
            if obj.__name__ == 'report' and callable(obj):
                return obj
    return None
